// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Planetscale doesn't support foreign keys yet, so we need to use this
}

model Protocol {
  id            String      @id @default(cuid())
  hash          String      @unique
  name          String
  schemaVersion Int
  description   String?
  importedAt    DateTime    @default(now())
  lastModified  DateTime
  stages        Json
  codebook      Json
  assets        Asset[]
  interviews    Interview[]
}

model Asset {
  key        String   @id
  assetId    String   @unique
  name       String
  type       String
  url        String
  size       Int
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  protocolId String // from db

  @@index(fields: [protocolId, assetId, key])
}

model Interview {
  id            String      @id @default(cuid()) // Cannot be bigint because we want to obfuscate the id
  startTime     DateTime    @default(now())
  finishTime    DateTime?
  exportTime    DateTime?
  lastUpdated   DateTime    @updatedAt
  network       Json
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String
  protocol      Protocol    @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  protocolId    String      @map("protocolId")
  currentStep   Int         @default(0)
  stageMetadata Json? // Used to store negative responses in tiestrength census and dyadcensus

  @@index(fields: [protocolId])
  @@index([participantId])
}

model Participant {
  id         String      @id @unique @default(cuid())
  identifier String      @unique
  label      String?
  interviews Interview[]
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  auth_session Session[]
  key          Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model AppSettings {
  configured                Boolean  @default(false)
  initializedAt             DateTime @default(now())
  allowAnonymousRecruitment Boolean  @default(false)
  limitInterviews            Boolean  @default(true)
  installationId            String   @unique @default(cuid())
}

model Events {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  type      String
  message   String
}
